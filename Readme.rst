===========================================================
Learn the Basics of Cookiecutter by Creating a Cookiecutter
===========================================================

The easiest way to understand what Cookiecutter does is to create a simple one
and see how it works.

Cookiecutter takes a source directory tree and copies it into your new
project. It replaces all the names that it finds surrounded by the
*templating tags* ``{{`` and ``}}`` with names that it finds in the file
``cookiecutter.json``. That's basically it. 

The replaced names can be file names, directory names, and strings inside
files.

With Cookiecutter, you can easily bootstrap a new project from a standard
form, which means you skip all the usual mistakes in trying to get a new
project going.

Before you can do anything in this example, you must have Python installed on
your machine. Go to the `Python Website <https://www.python.org/>`_ and follow
the instructions there. This includes the ``pip`` installer tool. Now run:

.. code-block:: bash

	$ pip install cookiecutter

Your First Cookiecutter
-----------------------

To get started, create a directory somewhere on your computer. The name of
this directory will be the name of your Cookiecutter template, but it doesn't
constrain anything else---the generated project doesn't need to use the
template name, for example. Our project will be called ``HelloCookieCutter1``:

.. code-block:: bash

    $ mkdir HelloCookieCutter1
    $ cd HelloCookieCutter1

Inside this directory, we create the directory tree to be copied into the
generated project. We want to generate a name for this directory, so
we put the directory name in templating tags:

.. code-block:: bash

	$ mkdir {{cookiecutter.repo_name}}
	$ cd {{cookiecutter.repo_name}}

Anything inside templating tags can be placed inside a *namespace*. Here, by
putting ``repo_name`` inside the ``cookiecutter`` namespace,
``cookiecutter.repo_name`` will be looked up from the ``cookiecutter.json``
file as the project is generated by Cookiecutter.

Now we are inside the directory tree that will be copied. For the simplest
possible Cookiecutter template, we'll just include a single file. Again, we want
the file name to be looked up from ``cookiecutter.json``, so we name it appropriately:

.. code-block:: bash

	$ touch {{cookiecutter.app_name}}.py

(``touch`` creates an empty file; you can just open it up in your editor). Now edit the
file so it contains:

.. code-block:: python

	print("Hello, {{cookiecutter.greeting_recipient}}!")

To finish, we create the ``cookiecutter.json`` file itself, so that
Cookiecutter can look up all our templated items. This file goes in our
``HelloCookieCutter1`` directory, and contains all the names we've used:

.. code-block:: json

	{
	    "repo_name": "Hello",
	    "app_name": "Go",
	    "greeting_recipient": "Bob"
	}

Now we can actually run Cookiecutter and create a new project from our
template. Move to a directory where you want to create the new project. Then
run Cookiecutter and hand it the directory where the template lives. On my
machine, it happens to be under the ``Git`` directory:

.. code-block:: bash

	$ cookiecutter C:\Users\bruce\Documents\Git\HelloCookieCutter1
	repo_name [Hello]:
	app_name [Go]:
	greeting_recipient [Bob]:

Notice that Cookiecutter tells us what the default name for each item is, and gives us the option
of replacing that name with something new. In this case, I just pressed ``Return`` for each one,
to accept all the defaults.

Now we have a generated directory called ``Hello``, containing a file ``Go.py``. When we run it:

.. code-block:: bash

	$ python Go.py
	Hello, Bob!

Voila! Instant generated project!

.. note::
	**Note**: The project we've created here happens to be Python, but Cookiecutter is just replacing
	templated items with names it looks up in ``cookiecutter.json``, so you can produce projects of
	any kind, including projects that aren't programs.

This is nice, but what if you want to share your Cookiecutter template with everyone on the Internet?
The easiest way is to upload it to a version control repository. As you might have guessed by the ``Git``
subdirectory, this example is on Gihub