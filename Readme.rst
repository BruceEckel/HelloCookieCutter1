===========================================================
Learn the Basics of Cookiecutter by Creating a Cookiecutter
===========================================================

The easiest way to understand what Cookiecutter does is to create a simple one
and see how it works.

Cookiecutter takes a source directory tree and copies it into your new
project. It replaces all the names that it finds surrounded by the
**templating tags** ``{{`` and ``}}`` with names that it finds in the file
``cookiecutter.json``. These names can be file names, directory names, and
strings inside files. That's basically it. This way, you can easily bootstrap
a new project from a standard form, which means you skip all the usual
mistakes in trying to get a new project going.

To get started, create a directory somewhere on your computer. The name of
this directory will be the name of your Cookiecutter template, but it doesn't
constrain anything else---the generated project doesn't need to use the
template name, for example. Our project will be called ``HelloCookieCutter1``:

.. code-block:: bash

    $ mkdir HelloCookieCutter1
    $ cd HelloCookieCutter1

Inside this directory, we create the directory tree to be copied into the
generated project. We want to be able to generate a new name for this directory, so
we put the name in templating tags:

.. code-block:: bash

	$ mkdir {{cookiecutter.repo_name}}
	$ cd {{cookiecutter.repo_name}}

Anything inside templating tags can be placed inside a **namespace**. Here, by
putting ``repo_name`` inside the ``cookiecutter`` namespace,
``cookiecutter.repo_name`` will be looked up from the ``cookiecutter.json``
file as the project is generated by Cookiecutter.

Now we are inside the directory tree that will be copied. For the simplest
possible Cookiecutter template, we'll just include a single file. Again, we want
the file name to be looked up from ``cookiecutter.json``, so we name it appropriately:

.. code-block:: bash

	$ touch {{cookiecutter.app_name}}.py

(``touch`` creates an empty file; you can just open it up in your editor). Now edit the
file so it contains:

.. code-block:: python

	print("Hello, {{cookiecutter.greeting_recipient}}!")

There's one more thing we need, which is the ``cookiecutter.json`` file itself, so that
Cookiecutter can look up all our templated items. This file goes in our ``HelloCookieCutter1``
directory:

.. code-block:: json

	{
	    "repo_name": "Hello",
	    "app_name": "Go",
	    "greeting_recipient": "Bob"
	}

Now we can actually run Cookiecutter